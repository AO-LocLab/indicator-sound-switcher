#!/usr/bin/env python
### BEGIN LICENSE
# Copyright (C) 2011 Dmitry Kann, http://yktoo.com
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3, as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranties of
# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.
### END LICENSE

import sys
import gtk
import subprocess
import os
import appindicator
import re

class SoundOutputSelector:
  def __init__(self):
    self.ind = appindicator.Indicator(
      "sound-output-selector",
      "sound-output-selector.svg",
      appindicator.CATEGORY_APPLICATION_STATUS)
    self.ind.set_status(appindicator.STATUS_ACTIVE)
    # Initialize audio sink list
    self.build_sink_list()
    # Build the menu
    self.menu = gtk.Menu()
    self.menu_setup()
    self.ind.set_menu(self.menu)

  def build_sink_list(self):
    # Invoke pacmd to enumerate sinks
    p = subprocess.Popen(['pacmd', 'list-sinks'], stdout=subprocess.PIPE)
    c = p.communicate()[0]
    # Parse the output and populate sinks[] dictionary
    self.sinks = {}
    self.active_sink_index = None
    current_sink_index = None
    for line in c.split("\n"):
      # Line starting with 'index' gives us sink index
      mo = re.match('^ *(\*?) *index: *(\d+)', line)
      if mo is not None:
        current_sink_index = int(mo.group(2))
        if mo.group(1)=='*': self.active_sink_index = current_sink_index
      # Check if it's device description
      elif current_sink_index is not None:
        mo = re.match('^\s*device\.description *= *"(.+)"', line)
        if mo is not None:
          self.sinks[current_sink_index] = mo.group(1)

  # Handler of sink selection item click event
  def item_select_sink(self, widget, buf):
    # Change default sink
    subprocess.call(['pacmd', 'set-default-sink', '%d' % buf], stdout=open(os.devnull, 'wb'))
    # Remap all active sink inputs as well
    p = subprocess.Popen(['pacmd', 'list-sink-inputs'], stdout=subprocess.PIPE)
    c = p.communicate()[0]
    for line in c.split("\n"):
      mo = re.match('^\s*index: *(\d+)', line)
      if mo is not None:
        subprocess.call(['pacmd', 'move-sink-input', mo.group(1), '%d' % buf], stdout=open(os.devnull, 'wb'))

  # Terminates the app
  def item_quit(self, widget, buf):
    sys.exit(0)

  # Handler of refresh item click event
  def item_refresh(self, widget, buf):
    self.build_sink_list()
    for item in self.menu.get_children(): self.menu.remove(item)
    self.menu_setup()

  # Initializes indicator menu
  def menu_setup(self):
    # Add sink items
    group_item = None
    for sink_idx, sink_name in self.sinks.items():
      item = gtk.RadioMenuItem(group_item, sink_name)
      if sink_idx == self.active_sink_index: item.set_active(True)
      item.connect("activate", self.item_select_sink, sink_idx)
      item.show()
      self.menu.append(item)
      # If it's the first item, make it the radio group item
      if group_item is None: group_item = item
    # Add a separator
    item = gtk.SeparatorMenuItem()
    item.show()
    self.menu.append(item)
    # Add Refresh item
    item = gtk.MenuItem('Refresh device list')
    item.connect("activate", self.item_refresh, None)
    item.show()
    self.menu.append(item)
    # Add Quit item
    item = gtk.MenuItem('Quit')
    item.connect("activate", self.item_quit, None)
    item.show()
    self.menu.append(item)

  # Main event loop
  def main(self):
    gtk.main()

if __name__ == "__main__":
  indicator = SoundOutputSelector()
  indicator.main()

